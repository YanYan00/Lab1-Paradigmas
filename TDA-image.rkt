#lang racket
(require "bitmap.rkt")
(require "pixmap.rkt")
(require "hexmap.rkt")
;--------------Selectores image-----------------
(define (get-ancho imagen)
  (car imagen))
(define (get-alto imagen)
  (car(cdr imagen)))
(define (get-pixeles imagen)
  (car(cddr imagen)))
;--------------Funciones TDA-image--------------
(define(lista-coordenadas ancho alto v z lista)
  (if(= alto v)
     (reverse lista)
  (if(= ancho z)
     (lista-coordenadas ancho alto (+ v 1) 0 lista)
   (lista-coordenadas ancho alto v (+ z 1) (cons (list v z) lista)))))
;
(define(ordenar-pixeles coordenadas pixeles pixeles-aux pixel lista-salida)
  (if (null? coordenadas)
      (reverse lista-salida)
    (if (equal? (car coordenadas) (list (car(car pixeles-aux)) (car(cdr(car pixeles-aux)))))
        (ordenar-pixeles (cdr coordenadas) pixeles  pixeles (car pixeles) (cons pixel lista-salida))
      (ordenar-pixeles coordenadas pixeles (cdr pixeles-aux)(car(cdr pixeles-aux)) lista-salida))))
;--------------TDA-image--------------
(define (TDAimage ancho alto . datos)
  (if(and(integer? alto)(integer? ancho)(>= alto 0)(>= ancho 0))
     (if(=(* alto ancho)(length datos))
          (list ancho alto (ordenar-pixeles (lista-coordenadas ancho alto 0 0 null) datos datos (car datos)null))
      (list ancho alto datos))
   (print "ingresa los datos correctamente")))   
;
(define hola(TDAimage 2 2 (pixbit-d  0 0 0 10) (pixbit-d  0 1 0 20) (pixbit-d 1 0 0 30) (pixbit-d 1 1 1 4)))
(define img3(TDAimage 2 2 (pixbit-d  0 0 0 10) (pixbit-d  0 1 0 20) (pixbit-d 1 0 0 30) (pixbit-d 1 1 1 4)))
(define holaa(TDAimage 2 2 (pixrgb-d  0 0 255 10 10 10) (pixrgb-d  0 1 20 20 20 20) (pixrgb-d 1 0 30 30 30 30) (pixrgb-d 1 1 40 40 40 40)))
(define holaaa(TDAimage 2 2 (pixhex-d  0 0 "a" 10) (pixhex-d  0 1 "a" 20) (pixhex-d 1 0 "a" 30) (pixhex-d 1 1 "a" 4)))
(define holaaaa(TDAimage 3 3 (pixbit-d  0 0 0 10) (pixbit-d  0 1 0 20)(pixbit-d  0 2 0 10) (pixbit-d 1 0 0 30) (pixbit-d 1 1 1 4)(pixbit-d  1 2 0 10)(pixbit-d  2 0 0 10)(pixbit-d  2 1 0 10)(pixbit-d  2 2 0 10)))
(define img(TDAimage 2 2 (pixbit-d  0 1 0 10) (pixbit-d  1 1 0 20) (pixbit-d 1 0 0 30) (pixbit-d 0 0 1 4)))
(define img2(TDAimage 3 3 (pixbit-d  0 0 0 10) (pixbit-d  1 1 0 20)(pixbit-d  2 2 0 10) (pixbit-d 0 1 0 30) (pixbit-d 2 1 1 4)(pixbit-d  2 0 0 10)(pixbit-d  0 2 0 10)(pixbit-d  1 0 0 10)(pixbit-d  1 2 0 10)))
(define img4 (TDAimage 2 1 (pixbit-d  0 1 0 10) (pixbit-d  0 1 0 20) (pixbit-d 1 0 0 30)))
;--------------Funcion compressed?---------------
(define (compressed? imagen)
  (if(=(*(get-ancho imagen)(get-alto imagen)) (length (get-pixeles imagen)))
     #t
    #f))
;--------------Funciones para flips--------------
(define (transformar lista salida)
  (if(null? lista)
      (reverse salida)
     (transformar (cdr lista) (cons (cddr(car lista)) salida))))
;
(define (volver lista lista-aux lista-salida)
  (if(null? (cdr lista))
     (if(null? lista-aux)        
        (reverse lista-salida)
      (volver lista (cdr lista-aux) (cons (car lista-aux) lista-salida)))  
     (if(null? lista-aux)
        (volver (cdr lista) (car(cdr lista)) lista-salida)
       (volver lista (cdr lista-aux) (cons (car lista-aux) lista-salida))) 
      ))
;
(define (juntar lista1 lista2 lista-agregar lista-pasar lista-salida)
  (if (null? (cdr lista1))
     (if(null? lista-pasar)
       (reverse (cons (reverse lista-agregar) lista-salida))
      (juntar lista1 lista2 (cons (car lista-pasar) lista-agregar) (cdr lista-pasar) lista-salida))
   (if(null? lista-pasar)
      (juntar (cdr lista1)(cdr lista2)(reverse(car(cdr lista1)))(car(cdr lista2))(cons (reverse lista-agregar)lista-salida))
    (juntar lista1 lista2 (cons (car lista-pasar) lista-agregar) (cdr lista-pasar) lista-salida)))
)
;--------------Funcion flipH--------------
(define (invertirH punto i lista a b)
  (if(null? lista)
     (reverse (cons a b))
     (if(= punto i)
        (invertirH punto 1 (cdr lista) (reverse(cons(car lista)null)) (cons a b))
      (invertirH punto (+ 1 i) (cdr lista) (cons (car lista) a ) b)  
)))
;
(define (flipH imagen)
  (list (get-ancho imagen) (get-alto imagen) (juntar (lista-coordenadas (get-ancho imagen) (get-alto imagen) 0 0 null)
          (volver (invertirH (get-ancho imagen) 0 (transformar (get-pixeles imagen) null) null null)
          (car (invertirH (get-ancho imagen) 0 (transformar (get-pixeles imagen) null) null null))null)
          (car(lista-coordenadas (get-ancho imagen) (get-alto imagen) 0 0 null))
          (car(volver (invertirH (get-ancho imagen) 0 (transformar (get-pixeles imagen) null) null null)
          (car (invertirH (get-ancho imagen) 0 (transformar (get-pixeles imagen) null) null null))null)) null)
        ))
;--------------Funcion flipV--------------
(define (agrupar punto i lista a b)
  (if(null? lista)
     (cons (reverse a) b)
     (if(= punto i)
        (agrupar punto 1 (cdr lista) (cons(reverse(car lista))null) (cons (reverse a) b))
      (agrupar punto (+ 1 i) (cdr lista) (cons (car lista) a ) b)  
)))
;
(define (flipV imagen)
  (list (get-ancho imagen) (get-alto imagen) (juntar (lista-coordenadas (get-ancho imagen) (get-alto imagen) 0 0 null)
          (volver (agrupar (get-ancho imagen)0(transformar (get-pixeles imagen) null) null null)
          (car(agrupar (get-ancho imagen)0(transformar (get-pixeles imagen) null) null null)) null)
          (car(lista-coordenadas (get-ancho imagen) (get-alto imagen) 0 0 null))
          (car(volver (agrupar (get-ancho imagen)0(transformar (get-pixeles imagen) null) null null)
          (car(agrupar (get-ancho imagen)0(transformar (get-pixeles imagen) null) null null)) null))null)
        ))
;--------------Funcion crop--------------
(define (filtrar-alto pixeles x1 x2 y1 y2 lista)
(define(crop imagen x1 x2 y1 y2)
  x1)
  