#lang racket
(require "bitmap.rkt")
(require "pixmap.rkt")
(require "hexmap.rkt")
;--------------Selectores image-----------------
(define (get-ancho imagen)
  (car imagen))
(define (get-alto imagen)
  (car(cdr imagen)))
(define (get-pixeles imagen)
  (car(cddr imagen)))
;--------------Funciones TDA-image--------------
(define(lista-coordenadas ancho alto v z lista)
  (if(= alto v)
     (reverse lista)
  (if(= ancho z)
     (lista-coordenadas ancho alto (+ v 1) 0 lista)
   (lista-coordenadas ancho alto v (+ z 1) (cons (list v z) lista)))))
;
(define(ordenar-pixeles coordenadas pixeles pixeles-aux pixel lista-salida)
  (if (null? coordenadas)
      (reverse lista-salida)
    (if (equal? (car coordenadas) (list (car(car pixeles-aux)) (car(cdr(car pixeles-aux)))))
        (ordenar-pixeles (cdr coordenadas) pixeles  pixeles (car pixeles) (cons pixel lista-salida))
      (ordenar-pixeles coordenadas pixeles (cdr pixeles-aux)(car(cdr pixeles-aux)) lista-salida))))
;--------------TDA-image--------------
(define (TDAimage ancho alto . datos)
  (if(and(integer? alto)(integer? ancho)(>= alto 0)(>= ancho 0))
     (if(=(* alto ancho)(length datos))
          (list ancho alto (ordenar-pixeles (lista-coordenadas ancho alto 0 0 null) datos datos (car datos)null))
      (list ancho alto datos))
   (print "ingresa los datos correctamente")))   
;
(define hola(TDAimage 2 2 (pixbit-d  0 0 1 10) (pixbit-d  0 1 0 20) (pixbit-d 1 0 0 30) (pixbit-d 1 1 0 4)))
(define img3(TDAimage 2 2 (pixbit-d  0 0 0 10) (pixbit-d  0 1 0 20) (pixbit-d 1 0 0 30) (pixbit-d 1 1 1 4)))
(define holaa(TDAimage 2 2 (pixrgb-d  0 0 220 20 60 10) (pixrgb-d  0 1 20 20 20 20) (pixrgb-d 1 0 30 30 30 30) (pixrgb-d 1 1 40 40 40 40)))
(define holaaa(TDAimage 2 2 (pixhex-d  0 0 "a" 10) (pixhex-d  0 1 "a" 20) (pixhex-d 1 0 "a" 30) (pixhex-d 1 1 "a" 4)))
(define holaaaa(TDAimage 3 3 (pixbit-d  0 0 0 10) (pixbit-d  0 1 0 20)(pixbit-d  0 2 0 10) (pixbit-d 1 0 0 30) (pixbit-d 1 1 1 4)(pixbit-d  1 2 0 10)(pixbit-d  2 0 0 10)(pixbit-d  2 1 0 10)(pixbit-d  2 2 0 10)))
(define img(TDAimage 2 2 (pixbit-d  0 1 0 10) (pixbit-d  1 1 0 20) (pixbit-d 1 0 0 30) (pixbit-d 0 0 1 4)))
(define img2(TDAimage 3 3 (pixbit-d  0 0 0 10) (pixbit-d  1 1 0 20)(pixbit-d  2 2 0 10) (pixbit-d 0 1 0 30) (pixbit-d 2 1 1 4)(pixbit-d  2 0 0 10)(pixbit-d  0 2 0 10)(pixbit-d  1 0 0 10)(pixbit-d  1 2 0 10)))
(define img4 (TDAimage 2 1 (pixbit-d  0 1 0 10) (pixbit-d  0 1 0 20) (pixbit-d 1 0 0 30)))
(define img5 (TDAimage 2 3 (pixbit-d  0 0 1 1) (pixbit-d  0 1 0 2) (pixbit-d 1 0 1 3)(pixbit-d  1 1 1 4) (pixbit-d  2 0 0 5) (pixbit-d 2 1 0 6)))
(define img7 (TDAimage 3 2 (pixbit-d  0 0 0 1) (pixbit-d  0 1 0 2) (pixbit-d 0 2 0 3)(pixbit-d  1 0 0 4) (pixbit-d  1 1 0 5) (pixbit-d 1 2 0 6)))
(define img6 (TDAimage 2 4 (pixbit-d  0 0 0 1) (pixbit-d  0 1 0 2) (pixbit-d 1 0 0 3)(pixbit-d  1 1 0 4) (pixbit-d  2 0 0 5) (pixbit-d 2 1 0 6)(pixbit-d  3 0 0 7) (pixbit-d 3 1 0 8)))
;--------------Funcion compressed?---------------
(define (compressed? imagen)
  (if(=(*(get-ancho imagen)(get-alto imagen)) (length (get-pixeles imagen)))
     #t
    #f))
;--------------Funciones para flips--------------
(define (transformar lista salida)
  (if(null? lista)
      (reverse salida)
     (transformar (cdr lista) (cons (cddr(car lista)) salida))))
;
(define (volverEnvoltorio lista1)
  (define (volver lista lista-aux lista-salida)
    (if(null? (cdr lista))
       (if(null? lista-aux)        
          (reverse lista-salida)
          (volver lista (cdr lista-aux) (cons (car lista-aux) lista-salida)))  
       (if(null? lista-aux)
          (volver (cdr lista) (car(cdr lista)) lista-salida)
          (volver lista (cdr lista-aux) (cons (car lista-aux) lista-salida))) 
       ))
  (volver lista1 (car lista1) null))
;
(define (juntarEnvoltorio lista1 lista2)
         (define (juntar lista1 lista2 lista-agregar lista-pasar lista-salida)
           (if (null? (cdr lista1))
               (if(null? lista-pasar)
                  (reverse (cons (reverse lista-agregar) lista-salida))
                  (juntar lista1 lista2 (cons (car lista-pasar) lista-agregar) (cdr lista-pasar) lista-salida))
               (if(null? lista-pasar)
                  (juntar (cdr lista1)(cdr lista2)(reverse(car(cdr lista1)))(car(cdr lista2))(cons (reverse lista-agregar)lista-salida))
                  (juntar lista1 lista2 (cons (car lista-pasar) lista-agregar) (cdr lista-pasar) lista-salida)))
           )
         (juntar lista1 lista2 (car lista1) (car lista2) null))
;--------------Funcion flipH--------------
(define (invertirH punto i lista a b)
  (if(null? lista)
     (reverse (cons a b))
     (if(= punto i)
        (invertirH punto 1 (cdr lista) (reverse(cons(car lista)null)) (cons a b))
      (invertirH punto (+ 1 i) (cdr lista) (cons (car lista) a ) b)  
)))
;
(define (flipH imagen)
  (list (get-ancho imagen) (get-alto imagen) (juntarEnvoltorio (lista-coordenadas (get-ancho imagen) (get-alto imagen) 0 0 null)
          (volverEnvoltorio (invertirH (get-ancho imagen) 0 (transformar (get-pixeles imagen) null) null null)
        ))))
;--------------Funcion flipV--------------
(define (agrupar punto i lista a b)
  (if(null? lista)
     (cons (reverse a) b)
     (if(= punto i)
        (agrupar punto 1 (cdr lista) (cons(reverse(car lista))null) (cons (reverse a) b))
      (agrupar punto (+ 1 i) (cdr lista) (cons (car lista) a ) b)  
)))
;
(define (flipV imagen)
  (list (get-ancho imagen) (get-alto imagen) (juntarEnvoltorio (lista-coordenadas (get-ancho imagen) (get-alto imagen) 0 0 null)
          (volverEnvoltorio (agrupar (get-ancho imagen)0(transformar (get-pixeles imagen) null) null null)
        ))))
;--------------Funcion crop--------------
(define (filtrar-alto pixeles x1 x2 lista-salida)
  (if(null? pixeles)
     (reverse lista-salida)
   (if(and (>= (car(car pixeles)) x1)(<= (car(car pixeles)) x2))
      (filtrar-alto (cdr pixeles) x1 x2 (cons (car pixeles) lista-salida))
     (filtrar-alto (cdr pixeles) x1 x2 lista-salida)
 )))
(define (filtrar-ancho pixeles y1 y2 lista-salida)
  (if(null? pixeles)
     (reverse lista-salida)
   (if(and (>= (car(cdr(car pixeles))) y1)(<= (car(cdr(car pixeles))) y2))
      (filtrar-ancho (cdr pixeles) y1 y2 (cons (car pixeles) lista-salida))
     (filtrar-ancho (cdr pixeles) y1 y2 lista-salida)
 )))
;---------------------------------------------------------------------------
(define(anchoImpares lista)
        (define(calcular-ancho-impares lista cont iniciador x)
          (if(null? lista)
             cont
             (if(not(= x iniciador))
                (calcular-ancho-impares (cdr lista) 1 x (car(car lista)))
                (calcular-ancho-impares (cdr lista) (+ cont 1) iniciador (car(car lista))))))
  (calcular-ancho-impares lista 0 (caar lista) (caar lista))
)

(define(anchoPares lista)
  (define(calcular-ancho-pares lista cont iniciador x)
    (if(null? lista)
       (+ cont 1)
       (if(not(= x iniciador))
          (calcular-ancho-pares (cdr lista) 1 x (car(car lista)))
          (calcular-ancho-pares (cdr lista) (+ cont 1) iniciador (car(car lista)))
          )))
  (calcular-ancho-pares lista 1 (caar lista) (caar lista)))
;-----------------------------------------------------
(define(altoImpares lista)
  (define(calcular-alto-impares lista cont iniciador x)
    (if(null? lista)
       (+ cont 1)
       (if(not(= x iniciador))
          (calcular-alto-impares (cdr lista) (+ cont 1) x (car(car lista)))
          (calcular-alto-impares (cdr lista) cont iniciador (car(car lista)))
          )))
  (calcular-alto-impares lista 1 (caar lista) (caar lista)))

(define(altoPares lista)
  (define(calcular-alto-pares lista cont iniciador x)
    (if(null? (cdr lista))
       (+ cont 1)
       (if(not(= x iniciador))
          (calcular-alto-pares (cdr lista) (+ cont 1) x (car(car lista)))
          (calcular-alto-pares (cdr lista) cont iniciador (car(car lista)))
          )))
  (calcular-alto-pares lista 1 (caar lista) (caar lista)))

(define(filtrar-puntos imagen x1 y1 x2 y2)
  (filtrar-ancho (filtrar-alto (get-pixeles imagen) x1 x2 null)  y1 y2 null))

(define(crop imagen x1 y1 x2 y2)
          (if(odd? (length(filtrar-puntos imagen x1 y1 x2 y2)))
             (if(= 3 (length(filtrar-puntos imagen x1 y1 x2 y2)))
                (list (anchoImpares (filtrar-puntos imagen x1 y1 x2 y2))(altoImpares (filtrar-puntos imagen x1 y1 x2 y2))
                      (juntarEnvoltorio (lista-coordenadas (anchoImpares (filtrar-puntos imagen x1 y1 x2 y2))
                        (altoImpares (filtrar-puntos imagen x1 y1 x2 y2))0 0 null)(transformar (filtrar-puntos imagen x1 y1 x2 y2) null)
                                      ))
              (if(= 1 (length(filtrar-puntos imagen x1 y1 x2 y2)))
                 (list 1 1 (juntarEnvoltorio (lista-coordenadas 1 1 0 0 null)
                (transformar (filtrar-puntos imagen x1 y1 x2 y2) null)
                                      ))
               (list (anchoPares (filtrar-puntos imagen x1 y1 x2 y2))(anchoPares (filtrar-puntos imagen x1 y1 x2 y2))
                     (juntarEnvoltorio (lista-coordenadas (anchoPares (filtrar-puntos imagen x1 y1 x2 y2))
                (anchoPares (filtrar-puntos imagen x1 y1 x2 y2))0 0 null)
                (transformar (filtrar-puntos imagen x1 y1 x2 y2) null))
                                      )))      
             (list (anchoPares (filtrar-puntos imagen x1 y1 x2 y2))(altoPares (filtrar-puntos imagen x1 y1 x2 y2))
                (juntarEnvoltorio (lista-coordenadas (anchoPares (filtrar-puntos imagen x1 y1 x2 y2))
                (anchoPares (filtrar-puntos imagen x1 y1 x2 y2))0 0 null)
                (transformar (filtrar-puntos imagen x1 y1 x2 y2) null)
                                      ))))
                   
;--------------Funcion imgRGB->imgHex-------
(define hexadecimales (list "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "A" "B" "C" "D" "E" "E"))

(define (crearHex pixeles transformados)
  (define (cambiar-pixel lista-pixeles lista-hexadecimales lista-salida)
    (if(null? (cdr lista-pixeles))
       (reverse(cons (list (get-x (car lista-pixeles))(get-y (car lista-pixeles))(car lista-hexadecimales)(get-d (car lista-pixeles))) lista-salida))
     (cambiar-pixel (cdr lista-pixeles) (cdr lista-hexadecimales) (cons (list (get-x (car lista-pixeles))(get-y (car lista-pixeles))(car lista-hexadecimales)(get-d (car lista-pixeles)))lista-salida))
       ))
  (cambiar-pixel pixeles transformados null))

(define(transformarHex lista)
  (define(transformarValores lista lista-actual palabra lista-palabras hexadecimales)
    (if(null? (cdr lista))
       (if(null? lista-actual)
          (reverse(cons palabra lista-palabras))
        (transformarValores lista (cdr lista-actual) (string-append palabra (string-append (list-ref hexadecimales (quotient (car lista-actual) 16))(list-ref hexadecimales (remainder (car lista-actual)16)))) lista-palabras hexadecimales))
    (if(null? lista-actual)
        (transformarValores (cdr lista) (car(cdr lista)) "#" (cons palabra lista-palabras) hexadecimales)
        (transformarValores lista (cdr lista-actual) (string-append palabra (string-append (list-ref hexadecimales (quotient (car lista-actual) 16))(list-ref hexadecimales (remainder (car lista-actual)16)))) lista-palabras hexadecimales)
       )))
  (transformarValores lista (car lista) "#" null hexadecimales))

(define (filtro-depth lista)
  (define (quitar-depth lista lista-salida)
    (if(null? lista)
       (reverse lista-salida)
       (quitar-depth (cdr lista) (cons (reverse(cdr(reverse(car lista)))) lista-salida))))
  (quitar-depth lista null))

(define(imgRGB->imgHex imagen)
  (list (get-ancho imagen)(get-alto imagen)(crearHex (get-pixeles imagen)(transformarHex(filtro-depth (transformar(get-pixeles imagen)null))))))
;--------------Funcion rotate90-------------
(define(agruparEnvoltorio lista ancho alto)
        (define(agrupar-tramos-cuadrados lista lista-aux elemento ancho alto x y lista-salida)
          (if(= (-(* alto alto)alto) x)
             (reverse lista-salida)
             (if(= ancho y)
                (agrupar-tramos-cuadrados  lista lista-aux (cadr lista) ancho alto (+ x 1) 0 (cons elemento lista-salida))
                (if(null? (cdr lista-aux))
                   (agrupar-tramos-cuadrados (cdr lista) (cdr lista) (car(cdr lista)) ancho alto x 0 (cons (car(cdr lista)) lista-salida))
                   (agrupar-tramos-cuadrados lista (cdr lista-aux) (cadr lista-aux) ancho alto x (+ y 1) lista-salida))     
                )))
   (agrupar-tramos-cuadrados lista lista (cons (car lista) null) ancho alto 0 0 null))
;
(define(agruparEnvoltorioNoCuadrados lista ancho alto)
        (define(agrupar-tramos-no lista lista-aux elemento ancho alto x y lista-salida)
          (if(= (-(* alto ancho)ancho) x)
             (reverse lista-salida)
             (if(= ancho y)
                (agrupar-tramos-no  lista lista-aux (cadr lista) ancho alto (+ x 1) 0 (cons elemento lista-salida))
                (if(null? (cdr lista-aux))
                   (agrupar-tramos-no (cdr lista) (cdr lista) (car(cdr lista)) ancho alto x 0 (cons (car(cdr lista)) lista-salida))
                   (agrupar-tramos-no lista (cdr lista-aux) (cadr lista-aux) ancho alto x (+ y 1) lista-salida))     
            
                )))
  (agrupar-tramos-no lista lista (cons (car lista)null) ancho alto 0 0 null))
;
  
(define(separar cantidad i lista lista-agregar lista-salida)
  (if(null? lista)
     (reverse (cons lista-agregar lista-salida))
   (if(= cantidad i)
      (separar cantidad 1 (cdr lista) (cons(car lista) null) (cons lista-agregar lista-salida))
     (separar cantidad (+ i 1) (cdr lista) (cons (car lista) lista-agregar) lista-salida))))

(define(rotate90 imagen)
  (if(=(get-ancho imagen)(get-alto imagen))
     (list (get-ancho imagen) (get-alto imagen) (juntarEnvoltorio (lista-coordenadas (get-ancho imagen) (get-alto imagen) 0 0 null)
                    (volverEnvoltorio(separar (get-ancho imagen) 1 (agruparEnvoltorio (transformar (get-pixeles imagen)null)
                    (get-ancho imagen)(get-alto imagen)) (cons(car(transformar (get-pixeles imagen)null))null) null))))

     (list (get-alto imagen) (get-ancho imagen) (juntarEnvoltorio (lista-coordenadas (get-alto imagen) (get-ancho imagen) 0 0 null)
                    (volverEnvoltorio(separar (get-alto imagen) 1 (agruparEnvoltorioNoCuadrados (transformar (get-pixeles imagen)null)
                    (get-ancho imagen) (get-alto imagen)) (cons(car(transformar (get-pixeles imagen)null))null) null))))))

  