#lang racket
(require "bitmap.rkt")
(require "pixmap.rkt")
(require "hexmap.rkt")  
(define(lista-coordenadas x y v z lista)
  (if(= y v)
     (reverse lista)
  (if(= x z)
     (lista-coordenadas x y (+ v 1) 0 lista)
   (lista-coordenadas x y v (+ z 1) (cons (list v z) lista)))))
;
(define(orden-datos x lista)
  (if(null? x)
     (reverse lista)
   (orden-datos (cdr x) (cons (list (car(car x)) (car(cdr(car x)))) lista))))
;
(define (TDAimage ancho alto . datos)
  (if (and (integer? alto)(integer? ancho)(>= alto 0)(>= ancho 0)(=(* alto ancho)(length datos))
      (equal? (lista-coordenadas ancho alto 0 0 null) (orden-datos datos null)))
  (list ancho alto datos)
  (print "ingresa los datos correctamente")))
;
(define hola(TDAimage 2 2 (pixbit-d  0 0 0 10) (pixbit-d  0 1 0 20) (pixbit-d 1 0 0 30) (pixbit-d 1 1 1 4)))
(define holaa(TDAimage 2 2 (pixrgb-d  0 0 255 10 10 10) (pixrgb-d  0 1 20 20 20 20) (pixrgb-d 1 0 30 30 30 30) (pixrgb-d 1 1 40 40 40 40)))
(define holaaa(TDAimage 2 2 (pixhex-d  0 0 "a" 10) (pixhex-d  0 1 "a" 20) (pixhex-d 1 0 "a" 30) (pixhex-d 1 1 "a" 4)))
(define holaaaa(TDAimage 3 3 (pixbit-d  0 0 0 10) (pixbit-d  0 1 0 20)(pixbit-d  0 2 0 10) (pixbit-d 1 0 0 30) (pixbit-d 1 1 1 4)(pixbit-d  1 2 0 10)(pixbit-d  2 0 0 10)(pixbit-d  2 1 0 10)(pixbit-d  2 2 0 10)))
;
(define (transformar lista salida)
  (if(null? lista)
      (reverse salida)
     (transformar (cdr lista) (cons (cddr(car lista)) salida))))
;
(define (invertirH punto i lista a b)
  (if(null? lista)
     (reverse (cons a b))
     (if(= punto i)
        (invertirH punto 1 (cdr lista) (reverse(cons(car lista)null)) (cons a b))
      (invertirH punto (+ 1 i) (cdr lista) (cons (car lista) a ) b)  
)))
(define (agrupar punto i lista a b)
  (if(null? lista)
     (reverse(cons (reverse a) b))
     (if(= punto i)
        (agrupar punto 1 (cdr lista) (cons(reverse(car lista))null) (cons (reverse a) b))
      (agrupar punto (+ 1 i) (cdr lista) (cons (car lista) a ) b)  
)))
;
(define (volver lista lista-aux lista-salida)
  (if(null? (cdr lista))
     (if(null? lista-aux)        
        (reverse lista-salida)
      (volver lista (cdr lista-aux) (cons (car lista-aux) lista-salida)))  
     (if(null? lista-aux)
        (volver (cdr lista) (car(cdr lista)) lista-salida)
       (volver lista (cdr lista-aux) (cons (car lista-aux) lista-salida))) 
      ))
;
(define (juntar lista1 lista2 lista-agregar lista-pasar lista-salida)
  (if (null? (cdr lista1))
     (if(null? lista-pasar)
       (reverse (cons (reverse lista-agregar) lista-salida))
      (juntar lista1 lista2 (cons (car lista-pasar) lista-agregar) (cdr lista-pasar) lista-salida))
   (if(null? lista-pasar)
      (juntar (cdr lista1)(cdr lista2)(reverse(car(cdr lista1)))(car(cdr lista2))(cons (reverse lista-agregar)lista-salida))
    (juntar lista1 lista2 (cons (car lista-pasar) lista-agregar) (cdr lista-pasar) lista-salida)))
)
;
(define (flipv imagen)
  (agrupar (car imagen) 0 (transformar (car(cddr imagen)) null) null null))

(define (flipH imagen)
  (juntar (lista-coordenadas (car imagen) (car(cdr imagen)) 0 0 null)
          (volver (invertirH (car imagen) 0 (transformar (car(cddr imagen)) null) null null)
          (car (invertirH (car imagen) 0 (transformar (car(cddr imagen)) null) null null))null)
          (car(lista-coordenadas (car imagen) (car(cdr imagen)) 0 0 null))
          (car(volver (invertirH (car imagen) 0 (transformar (car(cddr imagen)) null) null null)
          (car (invertirH (car imagen) 0 (transformar (car(cddr imagen)) null) null null))null)) null))